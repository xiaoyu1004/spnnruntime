cmake_minimum_required(VERSION 3.14)
project(spnnruntime C CXX)

option(SPNN_BUILD_ILUVATAR "build iluvatar" ON)
option(SPNN_BUILD_SHARED "spnnruntime build shared or static lib" ON)
option(SPNN_BUILD_TESTS "spnnruntime build tests" ON)
option(USE_INTER "read inter" OFF)
option(USE_OPENMP "Use OpenMP" ON)
option(USE_CHECK "Use OpenMP" OFF)

if((NOT (CMAKE_BUILD_TYPE STREQUAL "Debug")) AND (NOT (CMAKE_BUILD_TYPE STREQUAL "Release")))
	set(CMAKE_BUILD_TYPE "Release")
endif()
message(STATUS "CMAKE_BUILD_TYPE: ${CMAKE_BUILD_TYPE}")

message(STATUS "SPNN_BUILD_ILUVATAR = ${SPNN_BUILD_ILUVATAR}")

if(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(CMAKE_C_COMPILER "/usr/bin/gcc")
    set(CMAKE_CXX_COMPILER "/usr/bin/g++")
endif()

if((CMAKE_CXX_COMPILER_ID STREQUAL "GNU") OR (CMAKE_CXX_COMPILER_ID STREQUAL "Clang"))
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -Wall -Werror")
    if(CMAKE_BUILD_TYPE STREQUAL "Release")
		set(CMAKE_CXX_VISIBILITY_PRESET hidden)
		message(STATUS "CMAKE_CXX_VISIBILITY_PRESET: ${CMAKE_CXX_VISIBILITY_PRESET}")
	endif()
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    # add_compile_options(/LD /W3 /WX)
    add_compile_options(/LD /W3 /FS)
    if(CMAKE_BUILD_TYPE STREQUAL "Debug")
        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS true)
    endif()
    string(REGEX REPLACE "/W[3|4]" "/W3" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
endif()

if(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
	set(CMAKE_IMPORT_LIBRARY_PREFIX lib)
	set(CMAKE_SHARED_LIBRARY_PREFIX lib)
	set(CMAKE_STATIC_LIBRARY_PREFIX lib)
endif()

set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${CMAKE_CURRENT_LIST_DIR}/cmake")
include(${CMAKE_MODULE_PATH}/dependencies.cmake)
message(STATUS "CUDA_INCLUDE_DIRS = ${CUDA_INCLUDE_DIRS}")
message(STATUS "CUDA_LIBRARY_DIRS = ${CUDA_LIBRARY_DIRS}")

set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)

add_subdirectory(src)
add_subdirectory(benchmark)
if(SPNN_BUILD_TESTS)
    enable_testing()
    add_subdirectory(tests)
endif()